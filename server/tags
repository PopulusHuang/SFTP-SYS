!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUF_SIZE	client_file/clnt_parse.c	8;"	d	file:
BUF_SIZE	client_file/parse.c	7;"	d	file:
BUF_SIZE	srv_parse.c	8;"	d	file:
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS= -lssl -lcrypto -lsqlite3 -g #-fno-stack-protector$/;"	m
CLIENT_PATH	client_file/clnt_parse.c	10;"	d	file:
CLIENT_PATH	client_file/parse.c	9;"	d	file:
Epoll_wait	myepoll.c	/^int Epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)$/;"	f
Event_add	myepoll.c	/^int Event_add(int epfd,int listenfd,struct epoll_event *ev)$/;"	f
FILENAME_SIZE	client_file/clnt_parse.c	9;"	d	file:
FILENAME_SIZE	client_file/parse.c	8;"	d	file:
FILENAME_SIZE	srv_parse.c	7;"	d	file:
Getcwd	server.c	/^void Getcwd(char *pwd,int size)$/;"	f
MAXBUF	server.c	9;"	d	file:
MAX_EVENT	server.c	11;"	d	file:
SERVER_PATH	client_file/clnt_parse.c	11;"	d	file:
SERVER_PATH	client_file/parse.c	10;"	d	file:
SERV_PORT	server.c	10;"	d	file:
SRV_PARSE_H_	srv_parse.h	2;"	d
_MYEPOLL_H_	myepoll.h	2;"	d
arg_init	server.c	/^void arg_init(char **argv,int *lisnum,int *myport)$/;"	f
clnt_login	client_file/clnt_parse.c	/^int clnt_login(SSL *ssl,char *order)$/;"	f
clnt_login	client_file/parse.c	/^int clnt_login(SSL *ssl,char *order)$/;"	f
clnt_login	srv_parse.c	/^int clnt_login(SSL *ssl,char *data,sqlite3 *db)$/;"	f
clnt_logout	srv_parse.c	/^void clnt_logout(SSL *ssl,char *data)$/;"	f
clnt_register	client_file/clnt_parse.c	/^int clnt_register(SSL *ssl,char *order)$/;"	f
clnt_register	client_file/parse.c	/^int clnt_register(SSL *ssl,char *order)$/;"	f
clnt_register	srv_parse.c	/^int clnt_register(SSL *ssl,char *data,sqlite3 *db)$/;"	f
create_emptyfile	client_file/clnt_parse.c	/^int create_emptyfile(char *filename)$/;"	f
create_emptyfile	client_file/parse.c	/^int create_emptyfile(char *filename)$/;"	f
create_emptyfile	srv_parse.c	/^int create_emptyfile(SSL *ssl,char *new_fileName,char *buf)$/;"	f
create_recvdir	client_file/clnt_parse.c	/^void create_recvdir(char *fdir)$/;"	f
create_recvdir	client_file/parse.c	/^void create_recvdir(char *fdir)$/;"	f
create_recvdir	server.c	/^void create_recvdir()$/;"	f
create_recvfile	server.c	/^int create_recvfile(SSL *ssl,char *new_fileName,char *buf)$/;"	f
download_files	client_file/clnt_parse.c	/^int download_files(SSL *ssl,char *order)$/;"	f
download_files	client_file/parse.c	/^int download_files(SSL *ssl,char *order)$/;"	f
get_account	srv_parse.c	/^int get_account(SSL *ssl,char *order,ACK *ack,ACCOUNT *account)$/;"	f
get_path	client_file/clnt_parse.c	/^int get_path(char *scan_path,int flag)$/;"	f
get_path	client_file/parse.c	/^int get_path(char *scan_path,int flag)$/;"	f
input_filename	client_file/clnt_parse.c	/^int input_filename(char *filename)$/;"	f
input_filename	client_file/parse.c	/^int input_filename(char *filename)$/;"	f
logout	client_file/clnt_parse.c	/^int logout(SSL *ssl,char *order)$/;"	f
logout	client_file/parse.c	/^int logout(SSL *ssl,char *order)$/;"	f
main	server.c	/^int main(int argc, char **argv)$/;"	f
obj_account	Makefile	/^obj_account=..\/share\/account.o$/;"	m
obj_all	Makefile	/^obj_all=$(obj_srv) $(obj_ssl) $(obj_sock) $(obj_epoll) $(obj_parse) $(obj_order) $(obj_account)$/;"	m
obj_epoll	Makefile	/^obj_epoll=myepoll.o$/;"	m
obj_order	Makefile	/^obj_order=..\/share\/order.o$/;"	m
obj_parse	Makefile	/^obj_parse=srv_parse.o$/;"	m
obj_sock	Makefile	/^obj_sock=..\/share\/sock_wrap.o$/;"	m
obj_srv	Makefile	/^obj_srv=server.o $/;"	m
obj_ssl	Makefile	/^obj_ssl=..\/share\/ssl_wrap.o$/;"	m
open_file	client_file/clnt_parse.c	/^int open_file(char *fileName)$/;"	f
open_file	client_file/parse.c	/^int open_file(char *fileName)$/;"	f
package_order	client_file/parse.c	/^void package_order(char *order,char *data,char *order_pack)$/;"	f
parse_clnt	srv_parse.c	/^int parse_clnt(SSL *ssl,char *data,sqlite3 *db)$/;"	f
parse_clnt_order	client_file/clnt_parse.c	/^int parse_clnt_order(SSL *ssl,char *order)$/;"	f
parse_clnt_order	client_file/parse.c	/^int parse_clnt_order(SSL *ssl,char *order)$/;"	f
parse_serv_order	client_file/clnt_parse.c	/^int parse_serv_order(char *ack,char *order)$/;"	f
parse_serv_order	client_file/parse.c	/^int parse_serv_order(char *ack,char *order)$/;"	f
recv_file	srv_parse.c	/^int recv_file(SSL *ssl,char *data)$/;"	f
recv_file_data	client_file/clnt_parse.c	/^int recv_file_data(SSL *ssl,int fd)$/;"	f
recv_file_data	client_file/parse.c	/^int recv_file_data(SSL *ssl,int fd)$/;"	f
recv_file_list	client_file/clnt_parse.c	/^int recv_file_list(SSL *ssl,char *order)$/;"	f
recv_file_list	client_file/parse.c	/^int recv_file_list(SSL *ssl,char *order)$/;"	f
remove_path	client_file/clnt_parse.c	/^int remove_path(char *filename,char *sendFN)$/;"	f
remove_path	client_file/parse.c	/^int remove_path(char *filename,char *sendFN)$/;"	f
remove_space	client_file/clnt_parse.c	/^void remove_space(char *src,char *dest)$/;"	f
remove_space	client_file/parse.c	/^void remove_space(char *src,char *dest)$/;"	f
scan_files	srv_parse.c	/^int scan_files(SSL *ssl,char *data)$/;"	f
scan_local_files	client_file/clnt_parse.c	/^void scan_local_files(void)$/;"	f
scan_local_files	client_file/parse.c	/^void scan_local_files(void)$/;"	f
scan_serv_files	client_file/clnt_parse.c	/^int scan_serv_files(SSL *ssl,char *order)$/;"	f
scan_serv_files	client_file/parse.c	/^int scan_serv_files(SSL *ssl,char *order)$/;"	f
send_account	client_file/clnt_parse.c	/^int send_account(SSL *ssl,ACK *ack,ACCOUNT *account,char *order)$/;"	f
send_account	client_file/parse.c	/^int send_account(SSL *ssl,ACK *ack,ACCOUNT *account,char *order)$/;"	f
send_data	client_file/clnt_parse.c	/^void send_data(SSL *ssl,int fd)$/;"	f
send_data	client_file/parse.c	/^void send_data(SSL *ssl,int fd)$/;"	f
send_file	client_file/clnt_parse.c	/^int send_file(SSL *ssl,char *order,int fd,char *filename)$/;"	f
send_file	client_file/parse.c	/^int send_file(SSL *ssl,char *order,int fd,char *filename)$/;"	f
send_file	srv_parse.c	/^int send_file(SSL *ssl,char *data)$/;"	f
setnonblocking	myepoll.c	/^int setnonblocking(int sockfd)$/;"	f
socket_init	server.c	/^int socket_init(int lisnum,char **argv)$/;"	f
ssl_load_cert_priv	server.c	/^void ssl_load_cert_priv(SSL_CTX *ctx)$/;"	f
upload_files	client_file/clnt_parse.c	/^int upload_files(SSL *ssl,char *order)$/;"	f
upload_files	client_file/parse.c	/^int upload_files(SSL *ssl,char *order)$/;"	f
write_data	srv_parse.c	/^int write_data(SSL *ssl,char *order,int fd)$/;"	f
